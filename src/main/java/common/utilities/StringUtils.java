package common.utilities;

import org.testng.ITestContext;

import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StringUtils {

    private StringUtils() {
        // private constructor ƒë·ªÉ tr√°nh kh·ªüi t·∫°o class helper
    }

    /**
     * Thay th·∫ø c√°c placeholder d·∫°ng ${var} trong chu·ªói b·∫±ng gi√° tr·ªã trong ctx.
     *
     * @param raw chu·ªói g·ªëc ch·ª©a placeholder
     * @param ctx Map key-value ƒë·ªÉ thay th·∫ø
     * @return chu·ªói sau khi ƒë√£ replace
     */
    /** Replace ${key} trong chu·ªói b·∫±ng value t·ª´ Map (gi√° tr·ªã null s·∫Ω thay b·∫±ng chu·ªói r·ªóng). */
    public static String replacePlaceholdersInString(String raw, Map<String, String> ctx) {
        String out = raw;
        // 1Ô∏è‚É£ Replace placeholder t·ª´ Excel map nh∆∞ b√¨nh th∆∞·ªùng
        for (Map.Entry<String, String> e : ctx.entrySet()) {
            String key = "${" + e.getKey() + "}";
            String val = e.getValue() == null ? "" : e.getValue();

            // x·ª≠ l√Ω dynamic {{TODAY}}, {{TODAY+N}}, ...
            val = DynamicDataHelper.resolveDynamicValue(val);

            out = out.replace(key, val);
        }
        return out;
    }

    /**
     * üîπ H√†m n√¢ng cao: Replace placeholder h·ªón h·ª£p (Excel + Context + ENV + Dynamic)
     *
     *  - ${key}             ‚Üí l·∫•y t·ª´ Excel map (row)
     *  - {{CTX:key}}        ‚Üí l·∫•y t·ª´ ITestContext
     *  - {{ENV:key}}        ‚Üí l·∫•y t·ª´ config.properties
     *  - {{TODAY}}, {{TODAY+N}} ‚Üí dynamic date/time
     *  - {{RAND:xxx}}       ‚Üí random data (VD RAND:PHONE)
     */
    public static String replacePlaceholdersAdvanced(String raw, Map<String, String> excelMap, ITestContext testCtx) {
        if (raw == null) return "";

        String result = raw;

        // ‚úÖ Replace ${key} t·ª´ Excel map
        for (Map.Entry<String, String> e : excelMap.entrySet()) {
            String key = "${" + e.getKey() + "}";
            String val = e.getValue() == null ? "" : e.getValue();

            // X·ª≠ l√Ω dynamic {{TODAY}}, {{TODAY+N}}, ...
//            val = DynamicDataHelper.resolveDynamicValue(val);

            // N·∫øu gi√° tr·ªã trong Excel l√† {{CTX:...}} ‚Üí l·∫•y t·ª´ context
            if (val.matches("\\{\\{CTX:[^}]+}}")) {
                String ctxKey = val.substring(6, val.length() - 2); // c·∫Øt "{{CTX:" v√† "}}"
                Object ctxVal = testCtx != null ? testCtx.getAttribute(ctxKey) : null;
                val = ctxVal != null ? ctxVal.toString() : "";
            }

            // ‚úÖ G·ªçi b·∫£n dynamic m·ªõi: x·ª≠ l√Ω {{TODAY}}, {{TODAY¬±N}}, {{CHECKSUM}}, ...
            val = DynamicDataHelper.resolveDynamicValue(val, testCtx);

            // N·∫øu gi√° tr·ªã l√† {{ENV:...}} ‚Üí l·∫•y t·ª´ config.properties
//            else if (val.matches("\\{\\{ENV:[^}]+}}")) {
//                String envKey = val.substring(6, val.length() - 2);
//                val = ConfigHelper.get(envKey);
//            }

            // Replace trong chu·ªói
            result = result.replace(key, val);
        }

        return result;
    }



}
